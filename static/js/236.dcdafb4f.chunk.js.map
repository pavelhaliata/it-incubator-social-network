{"version":3,"file":"static/js/236.dcdafb4f.chunk.js","mappings":"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","sources":["webpack://it-incubator-social-network/./src/components/updateProfile/style.module.scss?6ca5","components/updateProfile/UpdateProfile.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"wrapper\":\"style_wrapper__uoc1j\",\"form\":\"style_form__wy0BD\",\"field\":\"style_field__eyTkW\"};","import { Field, Form, Formik, FormikProps } from 'formik'\r\nimport style from './style.module.scss'\r\nimport { Button } from '../Button/Button'\r\nimport { updateProfilePropsType } from './UpdateProfileContainer'\r\nimport { useNavigate } from 'react-router-dom'\r\nimport { UpdateUserProfileType } from 'api/social-network-api'\r\n\r\nexport function UpdateProfile(props: updateProfilePropsType) {\r\n    const navigate = useNavigate()\r\n    const initialValues: UpdateUserProfileType = {\r\n        aboutMe: props.userProfileData.aboutMe,\r\n        userId: props.userId,\r\n        lookingForAJob: props.userProfileData.lookingForAJob,\r\n        lookingForAJobDescription: props.userProfileData.lookingForAJobDescription,\r\n        fullName: props.userProfileData.fullName,\r\n        contacts: {\r\n            github: props.userProfileData.contacts.github,\r\n            vk: props.userProfileData.contacts.vk,\r\n            facebook: props.userProfileData.contacts.facebook,\r\n            instagram: props.userProfileData.contacts.instagram,\r\n            twitter: props.userProfileData.contacts.twitter,\r\n            website: props.userProfileData.contacts.website,\r\n            youtube: props.userProfileData.contacts.youtube,\r\n            mainLink: props.userProfileData.contacts.mainLink,\r\n        },\r\n    }\r\n\r\n    const contacts: { [index: string]: any } = props.userProfileData.contacts\r\n\r\n    return (\r\n        <div className={style.wrapper}>\r\n            <Formik\r\n                initialValues={initialValues}\r\n                onSubmit={async (values, submitProps) => {\r\n                    try {\r\n                        await props.updateUserProfileAsync(values, submitProps)\r\n                        navigate('/profile')\r\n                    } catch (error) {\r\n                        submitProps.setStatus(error)\r\n                    }\r\n                }}\r\n            >\r\n                {(props: FormikProps<UpdateUserProfileType>) => (\r\n                    <Form className={style.form}>\r\n                        <label htmlFor='fullName'>full Name</label>\r\n                        <Field id='fullName' type='text' name='fullName' className={style.field} />\r\n\r\n                        <div style={{ display: 'flex', gap: '10px' }}>\r\n                            <Field id='lookingForAJob' type='checkbox' name='lookingForAJob' className={style.field} />\r\n                            <label htmlFor='lookingForAJob'>looking For A Job</label>\r\n                        </div>\r\n\r\n                        <label htmlFor='lookingForAJobDescription'>Job Description</label>\r\n                        <Field\r\n                            id='lookingForAJobDescription'\r\n                            type='text'\r\n                            name='lookingForAJobDescription'\r\n                            className={style.field}\r\n                        />\r\n\r\n                        <label htmlFor='aboutMe'>about Me</label>\r\n                        <Field id='aboutMe' type='text' name='aboutMe' className={style.field} />\r\n\r\n                        {Object.keys(contacts).map(key => {\r\n                            return <Contacts key={key} contactTitle={key} />\r\n                        })}\r\n\r\n                        <ul>\r\n                            {props.status &&\r\n                                props.status.map((item: string, index: number) => (\r\n                                    <li style={{ color: 'red' }} key={index}>\r\n                                        {item}\r\n                                    </li>\r\n                                ))}\r\n                        </ul>\r\n                        <Button label='Submit' type='submit' />\r\n                        <Button\r\n                            label='Cancel'\r\n                            onClick={() => {\r\n                                navigate('/profile')\r\n                            }}\r\n                        />\r\n                    </Form>\r\n                )}\r\n            </Formik>\r\n        </div>\r\n    )\r\n}\r\n\r\ntype ContactPropsType = {\r\n    contactTitle: string\r\n}\r\n\r\nconst Contacts = ({ contactTitle }: ContactPropsType) => {\r\n    return (\r\n        <>\r\n            <label htmlFor={contactTitle}>{contactTitle}</label>\r\n            <Field id={contactTitle} type={contactTitle} name={`contacts.${contactTitle}`} className={style.field} />\r\n        </>\r\n    )\r\n}\r\n"],"names":["UpdateProfile","props","navigate","useNavigate","initialValues","aboutMe","userProfileData","userId","lookingForAJob","lookingForAJobDescription","fullName","contacts","github","vk","facebook","instagram","twitter","website","youtube","mainLink","_jsx","className","style","wrapper","children","Formik","onSubmit","async","values","submitProps","updateUserProfileAsync","error","setStatus","_jsxs","Form","form","htmlFor","Field","id","type","name","field","display","gap","Object","keys","map","key","Contacts","contactTitle","status","item","index","color","Button","label","onClick","_ref","_Fragment","concat"],"sourceRoot":""}