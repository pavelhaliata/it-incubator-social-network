{"version":3,"file":"static/js/135.79946198.chunk.js","mappings":"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","sources":["webpack://it-incubator-social-network/./src/pages/MainPage/Dialogs/Dialogs.module.scss?727c","webpack://it-incubator-social-network/./src/pages/MainPage/Dialogs/Message/Message.module.scss?100b","pages/MainPage/Dialogs/Message/Message.tsx","assets/images/loading-pulse-200px.svg","pages/MainPage/Dialogs/Dialogs.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"dialogs\":\"Dialogs_dialogs__rFWzo\",\"author\":\"Dialogs_author__2pfaz\",\"companion\":\"Dialogs_companion__Vhbx0\",\"dialog_input\":\"Dialogs_dialog_input__UnA2B\",\"input_message\":\"Dialogs_input_message__JCpos\",\"send_btn\":\"Dialogs_send_btn__KgD5-\"};","// extracted by mini-css-extract-plugin\nexport default {\"message\":\"Message_message__4Az-o\",\"message__header\":\"Message_message__header__6hiYi\",\"message__avatar\":\"Message_message__avatar__1uS4+\",\"message__authorId\":\"Message_message__authorId__o6bHT\",\"message__body\":\"Message_message__body__QSsyP\",\"message__author\":\"Message_message__author__2irU0\",\"message__text\":\"Message_message__text__eIqDt\",\"message__time\":\"Message_message__time__59cV7\"};","import React from 'react'\r\nimport { ChatMessageType } from 'store-redux/chat_reducer'\r\nimport style from './Message.module.scss'\r\n\r\nexport const Message = React.memo(function Message(props: ChatMessageType) {\r\n    return (\r\n        <>\r\n            <div className={style.message}>\r\n                <div className={style.message__header}>\r\n                    <div className={style.message__avatar}>\r\n                        <img src={props.photo} alt={props.userName} />\r\n                    </div>\r\n                    <div className={style.message__authorId}><span>id:</span>{props.userId}</div>\r\n                </div>\r\n                <div className={style.message__body}>\r\n                    <div className={style.message__author}>{props.userName}</div>\r\n                    <div className={style.message__text}>{props.message}</div>\r\n                </div>\r\n            </div>\r\n        </>\r\n    )\r\n})\r\n","var _rect, _rect2, _rect3;\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nimport * as React from \"react\";\nfunction SvgLoadingPulse200Px(_ref, svgRef) {\n  let {\n    title,\n    titleId,\n    ...props\n  } = _ref;\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    xmlns: \"http://www.w3.org/2000/svg\",\n    xmlnsXlink: \"http://www.w3.org/1999/xlink\",\n    style: {\n      margin: \"auto\",\n      background: \"none\",\n      display: \"block\",\n      shapeRendering: \"auto\"\n    },\n    width: \"200px\",\n    height: \"200px\",\n    viewBox: \"0 0 100 100\",\n    preserveAspectRatio: \"xMidYMid\",\n    ref: svgRef,\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, _rect || (_rect = /*#__PURE__*/React.createElement(\"rect\", {\n    x: 17.5,\n    y: 30,\n    width: 15,\n    height: 40,\n    fill: \"#df1317\"\n  }, /*#__PURE__*/React.createElement(\"animate\", {\n    attributeName: \"y\",\n    repeatCount: \"indefinite\",\n    dur: \"1s\",\n    calcMode: \"spline\",\n    keyTimes: \"0;0.5;1\",\n    values: \"18;30;30\",\n    keySplines: \"0 0.5 0.5 1;0 0.5 0.5 1\",\n    begin: \"-0.2s\"\n  }), /*#__PURE__*/React.createElement(\"animate\", {\n    attributeName: \"height\",\n    repeatCount: \"indefinite\",\n    dur: \"1s\",\n    calcMode: \"spline\",\n    keyTimes: \"0;0.5;1\",\n    values: \"64;40;40\",\n    keySplines: \"0 0.5 0.5 1;0 0.5 0.5 1\",\n    begin: \"-0.2s\"\n  }))), _rect2 || (_rect2 = /*#__PURE__*/React.createElement(\"rect\", {\n    x: 42.5,\n    y: 30,\n    width: 15,\n    height: 40,\n    fill: \"#e4934b\"\n  }, /*#__PURE__*/React.createElement(\"animate\", {\n    attributeName: \"y\",\n    repeatCount: \"indefinite\",\n    dur: \"1s\",\n    calcMode: \"spline\",\n    keyTimes: \"0;0.5;1\",\n    values: \"20.999999999999996;30;30\",\n    keySplines: \"0 0.5 0.5 1;0 0.5 0.5 1\",\n    begin: \"-0.1s\"\n  }), /*#__PURE__*/React.createElement(\"animate\", {\n    attributeName: \"height\",\n    repeatCount: \"indefinite\",\n    dur: \"1s\",\n    calcMode: \"spline\",\n    keyTimes: \"0;0.5;1\",\n    values: \"58.00000000000001;40;40\",\n    keySplines: \"0 0.5 0.5 1;0 0.5 0.5 1\",\n    begin: \"-0.1s\"\n  }))), _rect3 || (_rect3 = /*#__PURE__*/React.createElement(\"rect\", {\n    x: 67.5,\n    y: 30,\n    width: 15,\n    height: 40,\n    fill: \"#e2bb8b\"\n  }, /*#__PURE__*/React.createElement(\"animate\", {\n    attributeName: \"y\",\n    repeatCount: \"indefinite\",\n    dur: \"1s\",\n    calcMode: \"spline\",\n    keyTimes: \"0;0.5;1\",\n    values: \"20.999999999999996;30;30\",\n    keySplines: \"0 0.5 0.5 1;0 0.5 0.5 1\"\n  }), /*#__PURE__*/React.createElement(\"animate\", {\n    attributeName: \"height\",\n    repeatCount: \"indefinite\",\n    dur: \"1s\",\n    calcMode: \"spline\",\n    keyTimes: \"0;0.5;1\",\n    values: \"58.00000000000001;40;40\",\n    keySplines: \"0 0.5 0.5 1;0 0.5 0.5 1\"\n  }))));\n}\nconst ForwardRef = /*#__PURE__*/React.forwardRef(SvgLoadingPulse200Px);\nexport default __webpack_public_path__ + \"static/media/loading-pulse-200px.0283178318e6660cfda89ca47b797a53.svg\";\nexport { ForwardRef as ReactComponent };","import { ChangeEvent, KeyboardEvent, useEffect, useRef, useState } from 'react'\r\nimport style from './Dialogs.module.scss'\r\nimport { DialogsPropsType } from './DialogsContainer'\r\nimport { Message } from './Message/Message'\r\nimport { Button } from 'components/Button/Button'\r\nimport loading from 'assets/images/loading-pulse-200px.svg'\r\n\r\nexport const Dialogs = (props: DialogsPropsType) => {\r\n    const [inputValue, setInputValue] = useState<string>('')\r\n    const [isAutoScroll, setIsAutoScroll] = useState(false)\r\n    const ref = useRef<HTMLDivElement>(null)\r\n\r\n    useEffect(() => {\r\n        props.startMessagesListeningAsync()\r\n        return () => {\r\n            props.stopMessagesListeningAsync()\r\n        }\r\n    }, [])\r\n    useEffect(() => {\r\n        if (props.messages.length) {\r\n            ref.current?.scrollIntoView({\r\n                behavior: 'smooth',\r\n                block: 'start',\r\n            })\r\n        }\r\n    }, [props.messages.length])\r\n    const scrollHandler = (e: React.UIEvent<HTMLDivElement, UIEvent>) => {\r\n        const element = e.currentTarget\r\n        if (Math.abs(element.scrollHeight - element.scrollTop - element.clientHeight) < 300) {\r\n            !isAutoScroll && setIsAutoScroll(true)\r\n        } else {\r\n            isAutoScroll && setIsAutoScroll(false)\r\n        }\r\n    }\r\n\r\n    const onChangeInputHandler = (event: ChangeEvent<HTMLTextAreaElement>) => {\r\n        setInputValue(event.currentTarget.value)\r\n    }\r\n    const sendMessageHandler = () => {\r\n        if (!inputValue) {\r\n            return\r\n        }\r\n        props.sendMessageAsync(inputValue)\r\n        setInputValue('')\r\n    }\r\n    const onKeyDownSendMessageHandler = (event: KeyboardEvent) => {\r\n        if (event.key === 'Enter' && event.ctrlKey && inputValue) {\r\n            sendMessageHandler()\r\n        }\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <div className={`${style.dialogs}`}>\r\n                {props.status === 'pending' ? (\r\n                    <div style={{ display: 'flex', alignItems: 'center' }}>\r\n                        connection lost... reconnect, please wait...\r\n                        <img src={loading} width='34px' height='34px' alt='icon' />\r\n                    </div>\r\n                ) : (\r\n                    <div className={`${style.dialog_item} ${style.author}`} onScroll={scrollHandler}>\r\n                        {props.messages.map(item => {\r\n                            return (\r\n                                <Message\r\n                                    key={item.id}\r\n                                    id={item.id}\r\n                                    userId={item.userId}\r\n                                    userName={item.userName}\r\n                                    photo={item.photo}\r\n                                    message={item.message}\r\n                                />\r\n                            )\r\n                        })}\r\n                        <div ref={ref} />\r\n                    </div>\r\n                )}\r\n            </div>\r\n            <div className={style.dialog_input}>\r\n                <textarea\r\n                    autoFocus={true}\r\n                    className={style.input_message}\r\n                    placeholder='Write message...'\r\n                    value={inputValue}\r\n                    onChange={onChangeInputHandler}\r\n                    onKeyDown={onKeyDownSendMessageHandler}\r\n                />\r\n                <Button\r\n                    label='Send'\r\n                    disabled={props.status !== 'ready'}\r\n                    className={style.send_btn}\r\n                    onClick={sendMessageHandler}\r\n                />\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n"],"names":["Message","React","props","_jsx","_Fragment","children","_jsxs","className","style","src","photo","alt","userName","userId","message","Dialogs","inputValue","setInputValue","useState","isAutoScroll","setIsAutoScroll","ref","useRef","useEffect","startMessagesListeningAsync","stopMessagesListeningAsync","_ref$current","messages","length","current","scrollIntoView","behavior","block","sendMessageHandler","sendMessageAsync","concat","dialogs","status","display","alignItems","loading","width","height","dialog_item","author","onScroll","e","element","currentTarget","Math","abs","scrollHeight","scrollTop","clientHeight","map","item","id","dialog_input","autoFocus","input_message","placeholder","value","onChange","event","onKeyDown","key","ctrlKey","Button","label","disabled","send_btn","onClick"],"sourceRoot":""}